name: Create repo

on:
  issues:
    types: [opened]

jobs:
  parse-issue:
    runs-on: self-hosted
    outputs:
      payload: ${{ steps.parse.outputs.payload }}
    steps:
      - name: Parse issue
        id: parse
        uses: onmax/issue-form-parser@v1.4
        with:
          issue_number: ${{ github.event.issue.number }}

      # Examples on how to use the output
      - name: Show parsed payload data
        env:
          NAME: ${{ fromJson(steps.parse.outputs.payload).Name }}
          DESCRIPTION: ${{ fromJson(steps.parse.outputs.payload).Description }}
          TEAMS: ${{ join(fromJson(steps.parse.outputs.payload).Teams, ',') }}
        run: |
          # Using the character `'` to prevent all characters enclosed within
          # them from being treated as special characters (e.g. $ or `)
          echo '${{ steps.parse.outputs.payload }}'
          echo "NAME: $NAME"
          echo "DESCRIPTION: $DESCRIPTION"
          echo "TEAMS: $TEAMS"
  check-name:
    runs-on: self-hosted
    needs: parse-issue
    if: needs.parse-issue.outputs.payload != '{}'
    steps:
      - name: Check repo name
        id: check-repo-name
        uses: robandpdx/check-value-regex@v1.0.2
        with:
          input: ${{ fromJson(needs.parse-issue.outputs.payload).Name }}
          regex: ${{ vars.REGEX }}
      - name: Fail is naming standard not met
        if: steps.check-repo-name.outputs.matches != 'true'
        run: exit 1
  create-repo:
    runs-on: self-hosted
    needs: [parse-issue, check-name]
    if: needs.parse-issue.outputs.payload != '{}'
    steps:
      - name: Create new repo
        env:
          TEMPLATE: ${{ vars.TEMPLATE}}
          NAME: ${{ fromJson(needs.parse-issue.outputs.payload).Name }}
          DESCRIPTION: ${{ fromJson(needs.parse-issue.outputs.payload).Description }}
          ADMIN_TEAM: ${{ vars.ADMIN_TEAM }}
          GH_TOKEN: ${{ secrets.ADMIN_TOKEN }}
          ORG: ${{ vars.ORG }}
          VISIBILITY: ${{ vars.VISIBILITY }}
        run: |
          if [ -n "$TEMPLATE" ]; then
            TEMPLATE_INCLUDE="--template $ORG/$TEMPLATE"
          else
            README_INCLUDE="--add-readme"
          fi
          case $VISIBILITY in
            public)
              VISIBILITY_INCLUDE="--public"
              ;;
            private)
              VISIBILITY_INCLUDE="--private"
              ;;
            internal)
              VISIBILITY_INCLUDE="--internal"
              ;;
            *)
              VISIBILITY_INCLUDE="--private"
              ;;
          esac

          gh repo create $ORG/$NAME \
            --description "$DESCRIPTION" \
            $TEMPLATE_INCLUDE \
            $README_INCLUDE \
            $VISIBILITY_INCLUDE

      - name: Add teams to repos access config
        env:
          ADMIN_TEAM: ${{ vars.ADMIN_TEAM }}
          NAME: ${{ fromJson(needs.parse-issue.outputs.payload).Name }}
          TEAMS: ${{ join(fromJson(needs.parse-issue.outputs.payload).Teams, ',') }}
          ORG: ${{ vars.ORG }}
          GH_TOKEN: ${{ secrets.ADMIN_TOKEN }}
        run: |
          echo Adding $TEAMS to repo access config
          IFS=',' read -r -a array <<< "$TEAMS"
          for team in "${array[@]}"
          do
            gh api \
              --method PUT \
              -H "Accept: application/vnd.github+json" \
              -H "X-GitHub-Api-Version: 2022-11-28" \
              /orgs/$ORG/teams/$team/repos/$ORG/$NAME \
              -f "permission=push"
          done
        
          if [ -n "$ADMIN_TEAM" ]; then
            gh api \
              --method PUT \
              -H "Accept: application/vnd.github+json" \
              -H "X-GitHub-Api-Version: 2022-11-28" \
              /orgs/$ORG/teams/$ADMIN_TEAM/repos/$ORG/$NAME \
              -f "permission=admin"
          fi

      - name: Close Issue
        uses: peter-evans/close-issue@v2
        with:
          issue-number: ${{ github.event.issue.number }}
          comment: Auto-closing issue upon successful repo creation
  failure:
    # comment on issue on failure
    needs: check-name
    runs-on: self-hosted
    if: ${{ always() && (needs.check-name.result == 'failure') }}
    steps:
      - name: Comment on issue
        uses: peter-evans/create-or-update-comment@v1
        with:
          issue-number: ${{ github.event.issue.number }}
          body: |
            The repo name does not adhere to the naming standard.